// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Crowdfunding {
    address payable public beneficiary;
    uint public goal;
    uint public amountRaised;
    mapping(address => uint) public contributions;
    bool public fundingGoalReached;
    bool public crowdsaleClosed;

    // Constructor to initialize the beneficiary and funding goal
    constructor(address payable _beneficiary, uint _goal) {
        beneficiary = _beneficiary;
        goal = _goal;
    }

    // Function to contribute to the crowdfunding campaign
    function contribute() public payable {
        require(!crowdsaleClosed, "Crowdsale is closed.");
        require(msg.value > 0, "Contribution must be greater than 0.");

        contributions[msg.sender] += msg.value;
        amountRaised += msg.value;
        if (amountRaised >= goal) {
            fundingGoalReached = true;
        }
    }

    // Function to check if the funding goal has been reached and transfer funds to the beneficiary
    function checkGoalReached() public {
        require(crowdsaleClosed, "Crowdsale is not closed yet.");
        require(fundingGoalReached, "Funding goal not reached.");
        assert(amountRaised >= goal);

        beneficiary.transfer(amountRaised);
    }

    // Function to manually close the crowdsale
    function closeCrowdsale() public {
        require(!crowdsaleClosed, "Crowdsale is already closed.");
        crowdsaleClosed = true;
        if (amountRaised >= goal) {
            fundingGoalReached = true;
        }
    }

    // Function to allow contributors to request a refund if the goal was not reached
    function refund() public {
        require(crowdsaleClosed, "Crowdsale is not closed.");
        require(!fundingGoalReached, "Funding goal reached, no refunds available.");

        uint amount = contributions[msg.sender];
        require(amount > 0, "No contributions to refund.");

        contributions[msg.sender] = 0;
        payable(msg.sender).transfer(amount);
    }
}
